directive @Constructs on FIELD_DEFINITION
directive @Oneof_Oneof1 on INPUT_FIELD_DEFINITION
directive @Oneof_Oneof2 on INPUT_FIELD_DEFINITION
directive @Oneof_Oneof3 on INPUT_FIELD_DEFINITION
"""
Any is any json type
"""
scalar Any
enum Bar {
	BAR1
	BAR2
	BAR3
}
type Baz {
	param1: String
}
input BazInput {
	param1: String
}
scalar Bytes
type Foo {
	param1: String
	param2: String
}
input FooInput {
	param1: String
	param2: String
}
type Foo_Foo2 {
	param1: String
}
input Foo_Foo2Input {
	param1: String
}
"""
 A Timestamp represents a point in time independent of any time zone or local
 calendar, encoded as a count of seconds and fractions of seconds at
 nanosecond resolution. The count is relative to an epoch at UTC midnight on
 January 1, 1970, in the proleptic Gregorian calendar which extends the
 Gregorian calendar backwards to year one.

 All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 second table is needed for interpretation, using a [24-hour linear
 smear](https://developers.google.com/time/smear).

 The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 restricting to that range, we ensure that we can convert to and from [RFC
 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

 # Examples

 Example 1: Compute Timestamp from POSIX `time()`.

     Timestamp timestamp;
     timestamp.set_seconds(time(NULL));
     timestamp.set_nanos(0);

 Example 2: Compute Timestamp from POSIX `gettimeofday()`.

     struct timeval tv;
     gettimeofday(&tv, NULL);

     Timestamp timestamp;
     timestamp.set_seconds(tv.tv_sec);
     timestamp.set_nanos(tv.tv_usec * 1000);

 Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

     FILETIME ft;
     GetSystemTimeAsFileTime(&ft);
     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
     Timestamp timestamp;
     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

 Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

     long millis = System.currentTimeMillis();

     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
         .setNanos((int) ((millis % 1000) * 1000000)).build();


 Example 5: Compute Timestamp from current time in Python.

     timestamp = Timestamp()
     timestamp.GetCurrentTime()

 # JSON Mapping

 In JSON format, the Timestamp type is encoded as a string in the
 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 where {year} is always expressed using four digits while {month}, {day},
 {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 is required. A proto3 JSON serializer should always use UTC (as indicated by
 "Z") when printing the Timestamp type and a proto3 JSON parser should be
 able to accept both UTC and other timezones (as indicated by an offset).

 For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 01:30 UTC on January 15, 2017.

 In JavaScript, one can convert a Date object to this format using the
 standard
 [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 method. In Python, a standard `datetime.datetime` object can be converted
 to this format using
 [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 the Joda Time's [`ISODateTimeFormat.dateTime()`](
 http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
 ) to obtain a formatter capable of generating timestamps in this format.



"""
type GoogleProtobuf_Timestamp {
	"""
	 Represents seconds of UTC time since Unix epoch
	 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	 9999-12-31T23:59:59Z inclusive.
	
	"""
	seconds: Int
	"""
	 Non-negative fractions of a second at nanosecond resolution. Negative
	 second values with fractions must still have non-negative nanos values
	 that count forward in time. Must be from 0 to 999,999,999
	 inclusive.
	
	"""
	nanos: Int
}
"""
 A Timestamp represents a point in time independent of any time zone or local
 calendar, encoded as a count of seconds and fractions of seconds at
 nanosecond resolution. The count is relative to an epoch at UTC midnight on
 January 1, 1970, in the proleptic Gregorian calendar which extends the
 Gregorian calendar backwards to year one.

 All minutes are 60 seconds long. Leap seconds are "smeared" so that no leap
 second table is needed for interpretation, using a [24-hour linear
 smear](https://developers.google.com/time/smear).

 The range is from 0001-01-01T00:00:00Z to 9999-12-31T23:59:59.999999999Z. By
 restricting to that range, we ensure that we can convert to and from [RFC
 3339](https://www.ietf.org/rfc/rfc3339.txt) date strings.

 # Examples

 Example 1: Compute Timestamp from POSIX `time()`.

     Timestamp timestamp;
     timestamp.set_seconds(time(NULL));
     timestamp.set_nanos(0);

 Example 2: Compute Timestamp from POSIX `gettimeofday()`.

     struct timeval tv;
     gettimeofday(&tv, NULL);

     Timestamp timestamp;
     timestamp.set_seconds(tv.tv_sec);
     timestamp.set_nanos(tv.tv_usec * 1000);

 Example 3: Compute Timestamp from Win32 `GetSystemTimeAsFileTime()`.

     FILETIME ft;
     GetSystemTimeAsFileTime(&ft);
     UINT64 ticks = (((UINT64)ft.dwHighDateTime) << 32) | ft.dwLowDateTime;

     // A Windows tick is 100 nanoseconds. Windows epoch 1601-01-01T00:00:00Z
     // is 11644473600 seconds before Unix epoch 1970-01-01T00:00:00Z.
     Timestamp timestamp;
     timestamp.set_seconds((INT64) ((ticks / 10000000) - 11644473600LL));
     timestamp.set_nanos((INT32) ((ticks % 10000000) * 100));

 Example 4: Compute Timestamp from Java `System.currentTimeMillis()`.

     long millis = System.currentTimeMillis();

     Timestamp timestamp = Timestamp.newBuilder().setSeconds(millis / 1000)
         .setNanos((int) ((millis % 1000) * 1000000)).build();


 Example 5: Compute Timestamp from current time in Python.

     timestamp = Timestamp()
     timestamp.GetCurrentTime()

 # JSON Mapping

 In JSON format, the Timestamp type is encoded as a string in the
 [RFC 3339](https://www.ietf.org/rfc/rfc3339.txt) format. That is, the
 format is "{year}-{month}-{day}T{hour}:{min}:{sec}[.{frac_sec}]Z"
 where {year} is always expressed using four digits while {month}, {day},
 {hour}, {min}, and {sec} are zero-padded to two digits each. The fractional
 seconds, which can go up to 9 digits (i.e. up to 1 nanosecond resolution),
 are optional. The "Z" suffix indicates the timezone ("UTC"); the timezone
 is required. A proto3 JSON serializer should always use UTC (as indicated by
 "Z") when printing the Timestamp type and a proto3 JSON parser should be
 able to accept both UTC and other timezones (as indicated by an offset).

 For example, "2017-01-15T01:30:15.01Z" encodes 15.01 seconds past
 01:30 UTC on January 15, 2017.

 In JavaScript, one can convert a Date object to this format using the
 standard
 [toISOString()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/toISOString)
 method. In Python, a standard `datetime.datetime` object can be converted
 to this format using
 [`strftime`](https://docs.python.org/2/library/time.html#time.strftime) with
 the time format spec '%Y-%m-%dT%H:%M:%S.%fZ'. Likewise, in Java, one can use
 the Joda Time's [`ISODateTimeFormat.dateTime()`](
 http://www.joda.org/joda-time/apidocs/org/joda/time/format/ISODateTimeFormat.html#dateTime%2D%2D
 ) to obtain a formatter capable of generating timestamps in this format.



"""
input GoogleProtobuf_TimestampInput {
	"""
	 Represents seconds of UTC time since Unix epoch
	 1970-01-01T00:00:00Z. Must be from 0001-01-01T00:00:00Z to
	 9999-12-31T23:59:59Z inclusive.
	
	"""
	seconds: Int
	"""
	 Non-negative fractions of a second at nanosecond resolution. Negative
	 second values with fractions must still have non-negative nanos values
	 that count forward in time. Must be from 0 to 999,999,999
	 inclusive.
	
	"""
	nanos: Int
}
type Maps {
	int32Int32: [Maps_Int32Int32Entry!]
	int64Int64: [Maps_Int64Int64Entry!]
	uint32Uint32: [Maps_Uint32Uint32Entry!]
	uint64Uint64: [Maps_Uint64Uint64Entry!]
	sint32Sint32: [Maps_Sint32Sint32Entry!]
	sint64Sint64: [Maps_Sint64Sint64Entry!]
	fixed32Fixed32: [Maps_Fixed32Fixed32Entry!]
	fixed64Fixed64: [Maps_Fixed64Fixed64Entry!]
	sfixed32Sfixed32: [Maps_Sfixed32Sfixed32Entry!]
	sfixed64Sfixed64: [Maps_Sfixed64Sfixed64Entry!]
	boolBool: [Maps_BoolBoolEntry!]
	stringString: [Maps_StringStringEntry!]
	stringBytes: [Maps_StringBytesEntry!]
	stringFloat: [Maps_StringFloatEntry!]
	stringDouble: [Maps_StringDoubleEntry!]
	stringFoo: [Maps_StringFooEntry!]
	stringBar: [Maps_StringBarEntry!]
}
input MapsInput {
	int32Int32: [Maps_Int32Int32EntryInput!]
	int64Int64: [Maps_Int64Int64EntryInput!]
	uint32Uint32: [Maps_Uint32Uint32EntryInput!]
	uint64Uint64: [Maps_Uint64Uint64EntryInput!]
	sint32Sint32: [Maps_Sint32Sint32EntryInput!]
	sint64Sint64: [Maps_Sint64Sint64EntryInput!]
	fixed32Fixed32: [Maps_Fixed32Fixed32EntryInput!]
	fixed64Fixed64: [Maps_Fixed64Fixed64EntryInput!]
	sfixed32Sfixed32: [Maps_Sfixed32Sfixed32EntryInput!]
	sfixed64Sfixed64: [Maps_Sfixed64Sfixed64EntryInput!]
	boolBool: [Maps_BoolBoolEntryInput!]
	stringString: [Maps_StringStringEntryInput!]
	stringBytes: [Maps_StringBytesEntryInput!]
	stringFloat: [Maps_StringFloatEntryInput!]
	stringDouble: [Maps_StringDoubleEntryInput!]
	stringFoo: [Maps_StringFooEntryInput!]
	stringBar: [Maps_StringBarEntryInput!]
}
type Maps_BoolBoolEntry {
	key: Boolean
	value: Boolean
}
input Maps_BoolBoolEntryInput {
	key: Boolean
	value: Boolean
}
type Maps_Fixed32Fixed32Entry {
	key: Int
	value: Int
}
input Maps_Fixed32Fixed32EntryInput {
	key: Int
	value: Int
}
type Maps_Fixed64Fixed64Entry {
	key: Int
	value: Int
}
input Maps_Fixed64Fixed64EntryInput {
	key: Int
	value: Int
}
type Maps_Int32Int32Entry {
	key: Int
	value: Int
}
input Maps_Int32Int32EntryInput {
	key: Int
	value: Int
}
type Maps_Int64Int64Entry {
	key: Int
	value: Int
}
input Maps_Int64Int64EntryInput {
	key: Int
	value: Int
}
type Maps_Sfixed32Sfixed32Entry {
	key: Int
	value: Int
}
input Maps_Sfixed32Sfixed32EntryInput {
	key: Int
	value: Int
}
type Maps_Sfixed64Sfixed64Entry {
	key: Int
	value: Int
}
input Maps_Sfixed64Sfixed64EntryInput {
	key: Int
	value: Int
}
type Maps_Sint32Sint32Entry {
	key: Int
	value: Int
}
input Maps_Sint32Sint32EntryInput {
	key: Int
	value: Int
}
type Maps_Sint64Sint64Entry {
	key: Int
	value: Int
}
input Maps_Sint64Sint64EntryInput {
	key: Int
	value: Int
}
type Maps_StringBarEntry {
	key: String
	value: Bar
}
input Maps_StringBarEntryInput {
	key: String
	value: Bar
}
type Maps_StringBytesEntry {
	key: String
	value: Bytes
}
input Maps_StringBytesEntryInput {
	key: String
	value: Bytes
}
type Maps_StringDoubleEntry {
	key: String
	value: Float
}
input Maps_StringDoubleEntryInput {
	key: String
	value: Float
}
type Maps_StringFloatEntry {
	key: String
	value: Float
}
input Maps_StringFloatEntryInput {
	key: String
	value: Float
}
type Maps_StringFooEntry {
	key: String
	value: Foo
}
input Maps_StringFooEntryInput {
	key: String
	value: FooInput
}
type Maps_StringStringEntry {
	key: String
	value: String
}
input Maps_StringStringEntryInput {
	key: String
	value: String
}
type Maps_Uint32Uint32Entry {
	key: Int
	value: Int
}
input Maps_Uint32Uint32EntryInput {
	key: Int
	value: Int
}
type Maps_Uint64Uint64Entry {
	key: Int
	value: Int
}
input Maps_Uint64Uint64EntryInput {
	key: Int
	value: Int
}
type Mutation {
	"""
	 all possible scalars and same message as input and output
	
	"""
	constructsScalars_(in: ScalarsInput): Scalars @Constructs
	"""
	 all scalars messages and enums as repeated
	
	"""
	constructsRepeated_(in: RepeatedInput): Repeated @Constructs
	"""
	 all possible maps and different messages as input and output
	
	"""
	constructsMaps_(in: MapsInput): Maps @Constructs
	"""
	 same name different types
	
	"""
	constructsAny_(in: Any): Pb_Any @Constructs
	"""
	 empty input and empty output
	
	"""
	constructsEmpty_: Boolean @Constructs
	"""
	 messages with all empty fields
	
	"""
	constructsEmpty2_: Boolean @Constructs
	"""
	 messages with all empty fields
	
	"""
	constructsEmpty3_: Boolean @Constructs
	constructsRef_(in: RefInput): Ref @Constructs
	constructsOneof_(in: OneofInput): Oneof @Constructs
	constructsCallWithId: Boolean @Constructs
}
type Oneof {
	param1: String
	oneof1: Oneof_Oneof1
	oneof2: Oneof_Oneof2
	oneof3: Oneof_Oneof3
}
input OneofInput {
	param1: String
	param2: String @Oneof_Oneof1
	param3: String @Oneof_Oneof1
	param4: String @Oneof_Oneof2
	param5: String @Oneof_Oneof2
	param6: String @Oneof_Oneof3
}
union Oneof_Oneof1 = Oneof_Param2 | Oneof_Param3
union Oneof_Oneof2 = Oneof_Param4 | Oneof_Param5
union Oneof_Oneof3 = Oneof_Param6
type Oneof_Param2 {
	param2: String
}
type Oneof_Param3 {
	param3: String
}
type Oneof_Param4 {
	param4: String
}
type Oneof_Param5 {
	param5: String
}
type Oneof_Param6 {
	param6: String
}
type Pb_Any {
	param1: String
}
type Query {
	dummy: Boolean
}
type Ref {
	localTime2: Timestamp
	external: GoogleProtobuf_Timestamp
	localTime: Timestamp
	file: Baz
	fileMsg: Foo
	fileEnum: Bar
	local: Ref_Foo
	foreign: Foo_Foo2
	en1: Ref_Foo_En
	en2: Ref_Foo_Bar_En
	gz: Ref_Foo_Baz_Gz
}
input RefInput {
	localTime2: TimestampInput
	external: GoogleProtobuf_TimestampInput
	localTime: TimestampInput
	file: BazInput
	fileMsg: FooInput
	fileEnum: Bar
	local: Ref_FooInput
	foreign: Foo_Foo2Input
	en1: Ref_Foo_En
	en2: Ref_Foo_Bar_En
	gz: Ref_Foo_Baz_GzInput
}
type Ref_Bar {
	param1: String
}
input Ref_BarInput {
	param1: String
}
type Ref_Foo {
	bar1: Ref_Foo_Bar
	localTime2: Timestamp
	externalTime1: GoogleProtobuf_Timestamp
	bar2: Ref_Bar
	en1: Ref_Foo_En
	en2: Ref_Foo_Bar_En
}
input Ref_FooInput {
	bar1: Ref_Foo_BarInput
	localTime2: TimestampInput
	externalTime1: GoogleProtobuf_TimestampInput
	bar2: Ref_BarInput
	en1: Ref_Foo_En
	en2: Ref_Foo_Bar_En
}
type Ref_Foo_Bar {
	param1: String
}
input Ref_Foo_BarInput {
	param1: String
}
enum Ref_Foo_Bar_En {
	A0
	A1
}
type Ref_Foo_Baz_Gz {
	param1: String
}
input Ref_Foo_Baz_GzInput {
	param1: String
}
enum Ref_Foo_En {
	A0
	A1
}
type Repeated {
	double: [Float!]
	float: [Float!]
	int32: [Int!]
	int64: [Int!]
	uint32: [Int!]
	uint64: [Int!]
	sint32: [Int!]
	sint64: [Int!]
	fixed32: [Int!]
	fixed64: [Int!]
	sfixed32: [Int!]
	sfixed64: [Int!]
	bool: [Boolean!]
	stringX: [String!]
	bytes: [Bytes!]
	foo: [Foo!]
	bar: [Bar!]
}
input RepeatedInput {
	double: [Float!]
	float: [Float!]
	int32: [Int!]
	int64: [Int!]
	uint32: [Int!]
	uint64: [Int!]
	sint32: [Int!]
	sint64: [Int!]
	fixed32: [Int!]
	fixed64: [Int!]
	sfixed32: [Int!]
	sfixed64: [Int!]
	bool: [Boolean!]
	stringX: [String!]
	bytes: [Bytes!]
	foo: [FooInput!]
	bar: [Bar!]
}
type Scalars {
	double: Float
	float: Float
	int32: Int
	int64: Int
	uint32: Int
	uint64: Int
	sint32: Int
	sint64: Int
	fixed32: Int
	fixed64: Int
	sfixed32: Int
	sfixed64: Int
	bool: Boolean
	"""
	 x for collisions with go method String
	
	"""
	stringX: String
	bytes: Bytes
}
input ScalarsInput {
	double: Float
	float: Float
	int32: Int
	int64: Int
	uint32: Int
	uint64: Int
	sint32: Int
	sint64: Int
	fixed32: Int
	fixed64: Int
	sfixed32: Int
	sfixed64: Int
	bool: Boolean
	"""
	 x for collisions with go method String
	
	"""
	stringX: String
	bytes: Bytes
}
type Timestamp {
	time: String
}
input TimestampInput {
	time: String
}
